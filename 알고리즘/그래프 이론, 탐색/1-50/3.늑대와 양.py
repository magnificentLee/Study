# 백준 16956 늑대와 양
# 해당 문제는 설치할 울타리의 최소 갯수를 구하는게 아님
# 전체를 울타리로 둘러쳐도 되니 일단 불가능하면 0, 가능하면1 과 전체 도식을 출력하는것

# 처음 생각했던 방식은 늑대일 때(W) 주변 8방향을 확인하여 S가 존재하면 정지, 아니고 빈칸이라면 D로 바꾸는것
# 그런데 막상 구현하고 보니 첫 예제부터 틀림 (대각선 방향을 체크하면서 불가능하다고 나왔으며 전체 결과물중 제일 좌측
# 즉, 체크하지 못한 두 칸 이상의 칸에서 빈칸이 발견됨)
# 다른 사람들의 방법을 확인해보니 늑대가 아니고 양이라면 다음 반복문, 빈칸이라면 울타리로 변환
# 늑대라면 늑대기준 4방향만 체크하여 양이 있을 경우 불가능으로 출력하는것
# 즉, 애초에 예제 출력처럼 나타내지 않았기 때문에 난이도가 이정도라는 말임


# 채점 결과 늑대는 상하좌우 한 칸만 이동가능한 것 같음
# 양을 울타리로 둘러치지 않고 늑대를 둘러쳤는데도 맞았음(예제 결과와 다름)

r, c = map(int, input().split())  # 행, 렬
array = [list(input()) for _ in range(r)]
dx = [0, -1, 0, 1]
dy = [1, 0, -1, 0]  # 하, 좌, 상, 우
flag = 1
for j in range(r):
    for i in range(c):
        if array[j][i] == "W":
            for k in range(4):
                nx = i + dx[k]
                ny = j + dy[k]
                if r > ny >= 0 and c > nx >= 0:
                    if array[ny][nx] == "S":
                        flag = 0
                        break
                    elif array[ny][nx] == ".":
                        array[ny][nx] = "D"

if flag:
    print(1)
    for i in array:
        print(*i, sep="")
else:
    print(0)