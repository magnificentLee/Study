# 힌트를 잘 보자
# 4명이 앉아있는 경우의 수가 5개이며
# 각각은 악수를 전부 안 하는 경우, 좌 악수, 우 안 함, 좌 악수 우 악수, 중앙만 악수, 좌 안 함 우 악수
# 총 5가지이다
# 즉, 악수를 안 하는 경우까지 포함한 전체의 경우를 구하라는 말이다
# 1 = 1 (악수X)
# 2 = 2 (악수X, 악수X), (악수)
# 3 = 3 (악수X, 악수X), (악수O 악수X), (악수X, 악수O)
# 4 = 5
# 즉, 피보나치의 구조를 가진다
# 출력 결과는 마지막 자리만 나타나면 되기 때문에 10으로 나눈 나머지를 나타내면 될 것

# 처음 풀었던 방식 : 마지막 출력때 dp[n] 값을 불러와 10을 나눈 나머지를 구하는 방식
# n이 백만 이상의 넓은 범위를 가질때 엄청난 시간이 걸림 -> 아마 제출하면 시간초과가 발생할것임
# 따라서 dp 값을 저장할때부터 10으로 나눈 나머지를 넣기로 함
"""
n = int(input())
dp = [0] * (n + 1) # 0, 1, 2, 3, 4 : 0까지 포함 n + 1
dp[1] = 1
dp[2] = 2
for i in range(3, n + 1):
    dp[i] = dp[i - 1] + dp[i - 2]

print(dp[n] % 10)
"""
# 수정한 코드, 2640ms 의 시간복잡도로 통과함
n = int(input())
dp = [1] * n  # 1, 2, 3, 4 : 시작은 1부터 시작함
# 처음 값이 1이기 때문에 0부터 시작하는 피보나치의 99 값은 해당 계산식의 98과 동일함
for i in range(1, n):
    dp[i] = (dp[i - 1] + dp[i - 2]) % 10
print(dp[n - 1])


