# 백준 14606 피자(small)의 연계 문제
# 해당 문제의 최적화된 식으로 풀 수는 있지만, 사용했던 dp코드로는 풀 수 없음 (입력값이 매우 크기 때문)

# 피자판의 개수 = 1~10^9
# 8의 경우를 예시로 해보면, 8 => 4,4(4*4=16) => 2*2,2*2 (2*2+2*2=8) => 1*1,1*1,1*1,1*1 (1+1+1+1=4) : 16+8+4=28
# 3의 경우를 예시로 해보면, 3 => 2,1(2*1=2) => 1*1,1 (1) : 2+1=3
# 현재 방식으로는 1000000000 (10^9)의 값을 계산하지 못함
# 최적화된 식이 존재하긴 함 : n * (n - 1) / 2  간단하게 수식으로도 풀 수 있지만 그렇게 풀면 dp문제가 맞나 싶음

# 아래 코드는 10000000(천만)부터 오래 걸리기 시작하며 입력값의 최댓값인 10^9(10억)은 정해진 시간내에 절대 풀 수 없음
"""
n = int(input())
dp = [0, 0]
for i in range(2, n + 1):
    m = i // 2
    dp.append(m * (i - m) + dp[i - m] + dp[m])
print(dp[n])
"""
# 아래는 최적화된 식으로 통과한 코드
import sys
n = int(sys.stdin.readline())
print(n * (n - 1) // 2)