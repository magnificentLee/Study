# 한 번 계산된 결과를 Memoization 하기 위한 리스트 초기화
d = [0] * 100


def fibo(n):
    if n <= 1:  # if n == 1 or n == 2 : return 1 이지만 에러 방지를 위해 수정
        return n
    if d[n] != 0:
        return d[n]
    d[n] = fibo(n - 1) + fibo(n - 2)
    return d[n]


print(fibo(99))
# Memoization : 다이나믹 프로그래밍을 구현하는 방법중 하나, 한 번 구현한 결과를
# 메모리 공간에 메모해두고 같은 식을 다시 호출하면 메모한 결과를 그대로 가져오는 기법
# 값을 저장하는 방법이므로 캐싱이라고도 한다
# 이전 방법과 달리 계산이 중첩되지 않아 빠른 속도로 답이 구해지는 것을 알 수 있다
# fibo(100) 을 구하고 싶으면 리스트를 1000까지 늘리면 된다([0] * 1000)
