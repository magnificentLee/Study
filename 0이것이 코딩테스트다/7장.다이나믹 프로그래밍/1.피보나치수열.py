# 내 방법
def fibo(n):
    if n <= 1:
        return n
    return fibo(n - 1) + fibo(n - 2)

print(fibo(int(input())))
# 교재 방법
# 해당 방법은 fibo(0) 입력시 에러가 발생하므로 위 방법처럼 하는게 낫다
"""
def fibo(n):
    if n == 1 or n == 2:
        return 1
    return fibo(n - 1) + fibo(n - 2)

print(fibo(0))
"""
# 참고로 해당 방식은 f(n) 함수에서 n이 커지면 수행 시간이 기하급수적으로 늘어난다
# 빅오 표기법을 이용하면 O(2^n) 으로 표현 할 수 있다
# 호출 과정은 211 페이지를 참고 (동일한 과정을 반복해서 호출하게됨)
# 예를 들어 f(6) 을 계산하려면 f(5) : f(4) + f(3), f(4) : f(3) + f(2)
# f(4) : f(3) + f(2) + f(1) .. 같은 f(3) 이라도 f(5)를 구할 때 1번
# f(6) : f(5) + f(4)에서 1번, f(5) = f(4) + f(3) 에서 1번... 최종적으로
# f(3) 만 3번은 호출되게 된다 (다른 것들도 똑같다)
# f(100)을 계산하려면 2^100 = 약 1000000000000000000000000000000 번의
# 연산이 필요하다. (궁금하면 해당 코드를 실행해보자 죽어도 정답은 안 나온다)
